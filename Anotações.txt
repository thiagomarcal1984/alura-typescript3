Rode npm install para instalar as dependências de package.json.

A estrutura da aplicação mudou: antes a pasta /app era a fonte, e a pasta 
/dist/js era o destino. Agora, a fonte é /app/src e o destino é /app/dist/js.

Um requisito não-funcional para a aplicação é a velocidade do tempo de execução
de certos métodos. Isso pode ser obtido por meio da biblioteca performance:

    public metodo(){
        const t1 = performance.now();
        ... lógica do método ...
        const t2 = performance.now();
        console.log(`Tempo de execução do método: ${(t2-t1)/1000} segundos.`)
    }

MAS essa mensuração invade a lógica de negócio dos métodos. É possível fazer 
essa mensuração de outra forma.

Os decorators do TypeScript podem ajudar na mensuração do tempo de execução.
Decorator é uma função que é executada junto com o método anotado nele:
    @logarTempoDeExecucao() // Use @nome_do_decorator() para decorar o método.
    public adiciona(): void {
        // lógica do método.
    }

Para que o TypeScript permita o uso de decorators, precisamos inserir uma outra
opção no compilador: a experimentalDecorators.

O código ainda não vai compilar, porque a declaração da função do decorator 
está incompleta.

Os decorator, na verdade, precisam retornar uma função com três parâmetros:
    return function (
        target: any, // Recebe o construtor ou o Prototype da classe. 
        propertyKey: string, // Nome do método que será invocado no decorator.
        descriptor: PropertyDescriptor // Objeto para definir o comportamento.
    ) {
        ... corpo da função ...
    }

O parm descriptor nos dá acesso a implementação do método decorado através 
de descriptor.value.

O método apply em uma função recuperada de descriptor.value usa dois 
parâmetros: o contexto onde a função será executada (fornecendo "this", o
próprio objeto que contém o método original será o contexto) e os argumentos
do método (que são obtidos a partir de args, declarado com um spread operator):

O JavaScript não aceita o uso de decorators: isso é uma particularidade do
TypeScript. Quando o .ts é compilado, o .js gerado declara no início do código
uma função que age como o decorator e no fim do código a função é invocada.

A pergunta: o método update em view.ts recebe dois decorators. Como saber 
a ordem de execução deles?

A resposta simples é: o decorator declarado primeiro é executado primeiro.
Mas a mudança do comportamento do método decorado começa a partir do último
decorator declarado.

É a história da pilha de execução: o primeiro decorator roda primeiro, mas 
retorna por último.

Outro raciocínio para exemplificar decorators: 
    class Product {
        @IsGreaterThan('purchasePrice')
        @IsPositive
        @IsNumber
        salesPrice: number
    }

    class Product {
        salesPrice = IsGreaterThan('puchasePrice')(
            IsPositive(
                IsNumber(Product, 'salesPrice')
            )
        )
    }

Se o decorator não tiver parâmetros, você pode declarar diretamente a 
função ao invés de declarar uma função que retorna uma função:
    export function meuDecoratorSimples(
        target: any,
        propertyKey: string,
        descriptor: PropertyDescriptor
    ) {
        ... lógica do decorator simples.
    }

    export function meuDecoratorComplexo() {
        return function(
            target: any,
            propertyKey: string,
            descriptor: PropertyDescriptor
        ) {
            ... lógica do decorator complexo.
        }
    }

    @meuDecoratorSimples
    @meuDecoratorComplexo()
    public metodoDecorado () {
        ... lógica do método decorado.
    }

Perceba que a invocação do decorator está diferente: como ela não é uma 
"função que retorna função", não precisamos de usar parênteses para invocar 
o decorator simplificado.

Por questões de flexibilidade (necessidade de parametrizar o decorator), 
e padronização do formato de invocação dos decorators, recomenda-se usar a 
sintaxe mais complexa (com o wrapper) mesmo.

O novo decorator escapar.ts remove a tag <script> de todo método que retorne 
uma string e que esteja anotado com ele. O Angular usa muito decorators.

Repare que o decorator @escapar não foi usado na classe View: a ideia é 
escolher quais views eu quero que escape ou não.

Até agora foram vistos os chamados decorators de métodos. Na próxima aula
veremos os decorators de propriedades. No exemplo da próxima aula, as 
propriedades dos elementos do DOM no controller NegociacaoController serão
instanciadas via decorator de propriedade, e não mediante construtor. Assim,
evitamos a repetição do comando de atribuição de HTMLInputElement que aparece
atualmente em NegociacaoController.

Um decorator de propriedade é declarado com dois parâmetros: target e 
propertyKey (o parâmetro descriptor nos decorators de método não se aplica).

Do jeito como o decorator domInjector está, ele não pode capturar a referência
ao objeto que vai conter a propriedade. Nesse caso, a solução proposta é usar 
métodos getters que representem as propriedades que queremos anotar.

O método Object.defineProperty() modifica o objeto passado como primeiro 
parâmetro. O segundo parâmetro é o nome da propriedade que será alterada.
E o terceiro parâmetro será o valor/função que será atribuída à propriedade
referenciada no segundo parâmetro.

Traduzindo: Object.defineProperty insere uma função (3o parm) com o nome da
propertyKey (2o parm) no protótipo do objeto (1o parm).

Código: 
    export function domInjector(seletor: string) {
        return function(
            target: any,
            propertyKey: string
        ) {
            const getter = function() {
                const elemento = document.querySelector(seletor);
                return elemento;
            }
            Object.defineProperty(
                target, // Referência ao objeto que tem a propriedade.
                propertyKey, // Nome da propriedade que será alterada.
                { get: getter } // Novo valor da propriedade.
            );
        }
    }

Novo problema: o getter de cada propriedade é sempre chamado, ou seja, 
o HTMLInputElement é sempre reatribuído sempre que a propriedade é acessada.
Como evitar isso?

As variáveis setadas no decorator permanecem no "cache" do método/propriedade
anotado(a). Testando a existência do elemento procurado nesse cache, evitamos
as múltiplas reatribuições.
