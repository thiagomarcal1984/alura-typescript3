Rode npm install para instalar as dependências de package.json.

A estrutura da aplicação mudou: antes a pasta /app era a fonte, e a pasta 
/dist/js era o destino. Agora, a fonte é /app/src e o destino é /app/dist/js.

Um requisito não-funcional para a aplicação é a velocidade do tempo de execução
de certos métodos. Isso pode ser obtido por meio da biblioteca performance:

    public metodo(){
        const t1 = performance.now();
        ... lógica do método ...
        const t2 = performance.now();
        console.log(`Tempo de execução do método: ${(t2-t1)/1000} segundos.`)
    }

MAS essa mensuração invade a lógica de negócio dos métodos. É possível fazer 
essa mensuração de outra forma.

Os decorators do TypeScript podem ajudar na mensuração do tempo de execução.
Decorator é uma função que é executada junto com o método anotado nele:
    @logarTempoDeExecucao() // Use @nome_do_decorator() para decorar o método.
    public adiciona(): void {
        // lógica do método.
    }

Para que o TypeScript permita o uso de decorators, precisamos inserir uma outra
opção no compilador: a experimentalDecorators.

O código ainda não vai compilar, porque a declaração da função do decorator 
está incompleta.

Os decorator, na verdade, precisam retornar uma função com três parâmetros:
    return function (
        target: any, // Recebe o construtor ou o Prototype da classe. 
        propertyKey: string, // Nome do método que será invocado no decorator.
        descriptor: PropertyDescriptor // Objeto para definir o comportamento.
    ) {
        ... corpo da função ...
    }
